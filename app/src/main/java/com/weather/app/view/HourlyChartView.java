package com.weather.app.view;

import android.content.Context;
import android.graphics.Color;
import android.graphics.Typeface;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Column;
import lecho.lib.hellocharts.model.ColumnChartData;
import lecho.lib.hellocharts.model.SubcolumnValue;
import lecho.lib.hellocharts.view.ColumnChartView;
import lecho.lib.hellocharts.view.LineChartView;

/**
 * Created by zengpu on 15/12/27.
 */
public class HourlyChartView extends ColumnChartView {

    private LineChartView mLineChartView;
    private ColumnChartView mColumnChartView;


    public HourlyChartView(Context context) {
        super(context);
    }

    public ColumnChartView getLineChartView(Context context,
                                            Typeface tf,
                                            List<String> mStrDates,
                                            List<double[]> xValues,
                                            List<double[]> yValues) {


        int color = Color.rgb(0x8e, 0x8e, 0x8e);
        int color1 = Color.rgb(0x61, 0x61, 0x61);

        List<Column> columns = new ArrayList<>();
        List<SubcolumnValue> values;

        List<AxisValue> mAxisValues = new ArrayList<>();
        //几组柱子
        int numColumns = xValues.get(0).length;
        //每组柱子下有几个柱子
        int numSubColumns = xValues.size();

        for (int i = 0; i < numColumns -2; i++ ) {
            values = new ArrayList<>();
            for (int j = 0; j < numSubColumns; j++) {
                values.add(new SubcolumnValue((float)yValues.get(j)[i+1],color));
            }

            Column column = new Column(values);
            column.setHasLabels(true);
//            column.setHasLabelsOnlyForSelected(true);
            columns.add(column);
        }

//        for (int i = 0; i < xValues.size(); i++){
//            double[] xV = xValues.get(i);
//            double[] yV = yValues.get(i);
//
//            List<SubcolumnValue> values = new ArrayList<>();
////            List<AxisValue> mAxisValues = new ArrayList<>();
//
//            for (int k = 0; k < xV.length-2; k++) {
//                values.add(new SubcolumnValue((float)xV[k],(int)yV[k+1]));
//
//            }
//            Column column = new Column(values);
//            column.setHasLabels(true);
//            columns.add(column);
//        }
//
        for (int j = 0; j< mStrDates.size(); j++) {
            mAxisValues.add(new AxisValue(j).setLabel(mStrDates.get(j)));
        }

        ColumnChartData data = new ColumnChartData();
        data.setColumns(columns);

        Axis axisX = new Axis();
        axisX.setHasTiltedLabels(false);
        axisX.setTypeface(tf);
        axisX.setAutoGenerated(false);
//        axisX.setHasLines(true);
//        axisX.setInside(true);
        axisX.setTextSize(13);
        axisX.setTextColor(color1);
        axisX.setValues(mAxisValues);
        axisX.setMaxLabelChars(2);
        axisX.setHasSeparationLine(true);
        double max = getMax(yValues.get(0));
        double min = getMin(yValues.get(0));

        if (max <= 0) {
            data.setAxisXTop(axisX);
        } else if (min >=0) {
            data.setAxisXBottom(axisX);
        }

//        Axis axisY = new Axis();
//        axisY.setHasTiltedLabels(true);
//        axisY.setAutoGenerated(true);
//
//        List<AxisValue> mYAxisValues = new ArrayList<>();
//        mYAxisValues.add(new AxisValue(0).setValue((float)(min-5)));
//        mYAxisValues.add(new AxisValue(1).setValue((float)(max+5)));
//        axisY.setValues(mYAxisValues);


//        data.setAxisYLeft(axisY);
        data.setValueLabelBackgroundColor(Color.TRANSPARENT);
        data.setValueLabelBackgroundEnabled(false);
        data.setValueLabelTypeface(tf);
        data.setValueLabelsTextColor(color1);
//        data.set;
        mColumnChartView = new ColumnChartView(context);
        mColumnChartView.setColumnChartData(data);
        return mColumnChartView;


    }


    public double getMax(double[] array) {
        double Max = array[1];
        for (int i = 2; i < array.length-1; i++) {
            if (Max < array[i]) {
                Max = array[i];
            }
        }
//        if (Math.abs(Max) < 5) {
//            return Max + Math.abs(Max * 0.4);
//        } else {
//            return Max + Math.abs(Max * 0.5);
//        }
        return Max;
    }

    public double getMin(double[] array) {
        double Min = array[1];
        for (int i = 2; i < array.length-1; i++) {
            if (Min > array[i]) {
                Min = array[i];
            }
        }
        return Min;
    }


}
